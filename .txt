
  const checkAmPm = (check)=>{
    const checkArr = check.split(":")
    if (checkArr[0]<12) { return "AM" }
    else { return "PM" }
  }
  const timeFixer = (time)=>{
    let final = null
    const actual = time.split(":")
    const timeSlice = parseInt(actual[0])
    if(timeSlice>12) 
      { 
        final = timeSlice-12 
        const mostFinal = String(final)+":"+actual[1] 
        return mostFinal 
      }
      else{
        return time
      }
  } 
  const RemoveT = (data) =>{
    const tobe = data.date
    const updated = tobe.split('T') 
    updated[1] = timeFixer(updated[1]) +" "+checkAmPm(updated[1])
    const final = updated.join(' ')
    const toBeSent = {...data,date:final}
    //But in React or good JavaScript practices, we do not directly mutate objects. Instead, 
    // we use the spread operator to copy the object and update its values immutably.
    return toBeSent 
  }